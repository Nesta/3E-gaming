<?php

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function threeecsgo_general_form_user_register_form_alter(&$form, &$form_state) {
  global $base_url;
  // Modification for the form with the given form ID goes here. For example, if
  // FORM_ID is "user_register_form" this code would run only on the user
  // registration form.

  $url_token = $_SERVER['HTTP_REFERER'];
  $token = str_replace('http://3e-csgo.api.oneall.com/socialize/redirect.html?provider_connection_token=', '', $url_token);

  //Your Site Settings
  $site_subdomain = '3e-csgo';
  $site_public_key = 'e1190c31-9d8c-4761-87a3-254ef9ed3b15';
  $site_private_key = '0fb5637c-21f9-4b23-8d28-1fc3d48a7047';

  //API Access Domain
  $site_domain = $site_subdomain.'.api.oneall.com';

  //Connection Resource
  $resource_uri = 'https://'.$site_domain.'/connections/' . $token . '.json';

  //Setup connection
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $resource_uri);
  curl_setopt($curl, CURLOPT_HEADER, 0);
  curl_setopt($curl, CURLOPT_USERPWD, $site_public_key . ":" . $site_private_key);
  curl_setopt($curl, CURLOPT_TIMEOUT, 15);
  curl_setopt($curl, CURLOPT_VERBOSE, 0);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);
  curl_setopt($curl, CURLOPT_FAILONERROR, 0);

  //Send request
  $result_json = curl_exec($curl);
  curl_close($curl);

  //Done
  $json_user = json_decode($result_json);

  if ( $json_user->response->result->status->code == 200 ) {
    $steamid = $json_user->response->result->data->user->identity->accounts[0]->userid;
  }

  if ( $form['account']['name']['#default_value'] != "" ) {
    $form['account']['name']['#attributes'] = ['readonly' => TRUE];
    $form['steamid']['widget'][0]['value']['#attributes'] = ['readonly' => TRUE];
    $form['steamid']['widget'][0]['value']['#default_value'] = $steamid;
  }

  $form['#validate'][0] = 'threeecsgo_general_user_validation';
  $form['#validate'][1] = '::validateForm';

  $form_state->setRedirectUrl(Url::fromUri($base_url));
}

function threeecsgo_general_user_validation(&$form, &$form_state) {
  $steamid = $form_state->getValue('steamid')[0]['value'];

  $url_api_steam_1 = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=28ECE97465C977305C7D06CBBA0DE695&steamids=" . $steamid;
  $content_url_1 = file_get_contents($url_api_steam_1);
  $json_steam_data = json_decode($content_url_1);

  $personaname = $json_steam_data->response->players[0]->personaname;

  $username_drupal = strtolower(str_replace(' ', '', preg_replace('([^A-Za-z0-9])', '',$personaname)));

  $user_register = user_load_by_name($username_drupal);
  if ($user_register->{'steamid'} != null) {
    $query_1 = \Drupal::entityQuery('node')
      ->condition('type', 'stats_weapon')
      ->condition('status', 1)
      ->condition('title',"%" . $user_register->getUsername() . "%", 'LIKE');

    $stats_weapon = $query_1->execute();

    foreach ($stats_weapon as $stats) {
      $node = Node::load($stats);
      $node->delete();
    }

    $query_2 = \Drupal::entityQuery('node')
      ->condition('type', 'article')
      ->condition('status', 1)
      ->condition('owner_article', $user_register->id());

    $inventory = $query_2->execute();

    foreach ($inventory as $article_id) {
      $node = Node::load($article_id);
      $node->delete();
    }

    user_delete($user_register->{'uid'}->value);
  }
}

/**
 * Implements hook_entity_insert().
 */
function threeecsgo_general_user_insert($entity) {
  $url_api_steam_1 = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=28ECE97465C977305C7D06CBBA0DE695&steamids=" . $entity->get('steamid')->value;
  $content_url_1 = file_get_contents($url_api_steam_1);
  $json_steam_data = json_decode($content_url_1);

  if ($json_steam_data == null) {
    $url_api_steam_1 = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=6C8548C8E9A4AD096820E41BB1252B27&steamids=" . $entity->get('steamid')->value;
    $content_url_1 = file_get_contents($url_api_steam_1);
    $json_steam_data = json_decode($content_url_1);
  }

  $personaname = $json_steam_data->response->players[0]->personaname;

  $realname = $json_steam_data->response->players[0]->realname;
  $primaryclanid = $json_steam_data->response->players[0]->primaryclanid;
  $avatar = $json_steam_data->response->players[0]->avatarfull;
  $tmp = 'public://tmp/avatar.jpeg';
  file_put_contents($tmp, file_get_contents($avatar));

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'team')
    ->condition('status', 1)
    ->condition('clanid', $primaryclanid);

  $team_id = $query->execute();

  if ( $team_id == null ) {
    $url_xml_group = "http://steamcommunity.com/gid/" . $primaryclanid . "/memberslistxml/";
    $xml_content = file_get_contents($url_xml_group);
    $group_data_xml = simplexml_load_string($xml_content, NULL, LIBXML_NOCDATA);
    $json = json_encode($group_data_xml);
    $group_data = json_decode($json, TRUE);

    $group_name = $group_data['groupDetails']['groupName'];
    $group_members = $group_data['groupDetails']['memberCount'];
    $group_avatar = $group_data['groupDetails']['avatarFull'];
    // Create file object from a locally copied file.
    $uri = file_unmanaged_copy($group_avatar, 'public://avatars/' . $group_name . '.jpg', FILE_EXISTS_REPLACE);
    $file = File::Create([
      'uri' => $uri,
    ]);
    $file->save();

    // Create settings node
    $team = Node::create([
      'title' => $group_name,
      'type' => 'team',
      'status' => 1,
    ]);
    $team->{'groupname'}->setValue($group_name);
    $team->{'clanid'}->setValue($primaryclanid);
    $team->{'members'}->setValue($group_members);

    // Attach file in node.
    $team->avatarfull->setValue([
      'target_id' => $file->id(),
    ]);

    $team->save();

    $query = \Drupal::entityQuery('node')
      ->condition('type', 'team')
      ->condition('status', 1)
      ->condition('clanid', $primaryclanid);

    $team_id = $query->execute();

    foreach ( $team_id as $id ) {
      $team = Node::load($id);
    }
  } else {
    foreach ( $team_id as $id ) {
      $team = Node::load($id);
    }
  }

  $entity->{'personaname'}->setValue($personaname);
  $entity->{'team'}->setValue($team->id());

  if ($realname != NULL) {
    $entity->{'realname'}->setValue($realname);
  }
  else {
    $entity->{'realname'}->setValue('No name');
  }

  // Create file object from a locally copied file.
  $uri = file_unmanaged_copy($avatar, 'public://avatars/' . $entity->get('steamid')->value . '.jpg', FILE_EXISTS_REPLACE);
  $file = File::Create([
    'uri' => $uri,
  ]);
  $file->save();

  // Attach file in node.
  $entity->avatarfull->setValue([
    'target_id' => $file->id(),
  ]);

  $url_api_steam_2 = "http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/?appid=730&key=28ECE97465C977305C7D06CBBA0DE695&steamid=" . $entity->get('steamid')->value;
  $content_url_2 = file_get_contents($url_api_steam_2);
  $json_steam_stats = json_decode($content_url_2);

  if ($json_steam_stats == null) {
    $url_api_steam_2 = "http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/?appid=730&key=6C8548C8E9A4AD096820E41BB1252B27&steamid=" . $entity->get('steamid')->value;
    $content_url_2 = file_get_contents($url_api_steam_2);
    $json_steam_stats = json_decode($content_url_2);
  }

  $stats = $json_steam_stats->playerstats->stats;

  foreach ($stats as $stat) {
    if ($stat->name == "total_deaths" or $stat->name == "total_kills" or $stat->name == "total_time_played"
      or $stat->name == "total_wins" or $stat->name == "total_kills_headshot" or $stat->name == "total_mvps"
      or $stat->name == "total_rounds_played" or $stat->name == "total_shots_fired" or $stat->name == "total_shots_hit") {
      if ($stat->name == "total_time_played") {
        $entity->{$stat->name}->setValue(($stat->value / 60) / 60);
      }
      else {
        $entity->{$stat->name}->setValue($stat->value);
      }
    }
    if ((strpos($stat->name, 'total_kills_') !== false or strpos($stat->name, 'total_hits_') !== false
        or strpos($stat->name, 'total_shots_') !== false) and !(strpos($stat->name, '_headshot') !== false
        or strpos($stat->name, '_enemy_weapon') !== false or strpos($stat->name, '_enemy_blinded') !== false
        or strpos($stat->name, '_against_zoomed_sniper') !== false or strpos($stat->name, 'total_shots_hit') !== false
        or strpos($stat->name, '_fired') !== false or strpos($stat->name, 'knife_fight') !== false)) {
      if (strpos($stat->name, 'total_kills_') !== false) {
        $name_weapon = str_replace('total_kills_', '', $stat->name);
      } else {
        if (strpos($stat->name, 'total_hits_') !== false) {
          $name_weapon = str_replace('total_hits_', '', $stat->name);
        } else {
          $name_weapon = str_replace('total_shots_', '', $stat->name);
        }
      }

      $query_1 = \Drupal::entityQuery('node')
        ->condition('type', 'stats_weapon')
        ->condition('status', 1)
        ->condition('title', $entity->getUsername() . " - " . $name_weapon);

      $node_id = $query_1->execute();

      if ( $node_id != null ) {
        foreach ( $node_id as $id ) {
          $node = Node::load($id);
        }
        $node->{str_replace('_' . $name_weapon, '', $stat->name)}->setValue($stat->value);

        $node->save();
      } else {
        $node = Node::create([
          'title' => $entity->getUsername() . " - " . $name_weapon,
          'type' => 'stats_weapon',
          'status' => 1,
        ]);

        $query_3 = \Drupal::entityQuery('node')
          ->condition('type', 'weapon')
          ->condition('status', 1)
          ->condition('code_weapon', $name_weapon);

        $result = $query_3->execute();

        foreach ($result as $id) {
          $node_weapon = Node::load($id);
        }

        $node->{str_replace('_' . $name_weapon, '', $stat->name)}->setValue($stat->value);
        $node->{'weapon'}->setValue($node_weapon);
        $node->{'owner_stats_weapon'}->setValue($entity->id());

        $node->save();
      }
    }
  }

  $entity->save();

  // Create Inventory
  $user = user_load_by_name($entity->getUsername());
  $url_api_steam_3 = "http://steamcommunity.com/profiles/" . $user->{'steamid'}->value . "/inventory/json/730/2";
  $content_url_3 = file_get_contents($url_api_steam_3);
  $json_steam_inventory = json_decode($content_url_3);
  $inventory = $json_steam_inventory->rgDescriptions;

  foreach ($inventory as $article) {
    if (strpos(strtoupper($article->market_name), 'CASE') != true and strpos(strtoupper($article->market_name), 'KEY') != true
      and strpos(strtoupper($article->market_name), 'GRAFFITI') != true and strpos(strtoupper($article->market_name), 'MUSIC') != true
      and strpos(strtoupper($article->market_name), 'MEDAL') != true and strpos(strtoupper($article->market_name), 'COIN') != true
      and strpos(strtoupper($article->market_name), 'TROPHY') != true) {
      $node_inventory = Node::create([
        'title' => $article->market_name,
        'type' => 'article',
        'status' => 1,
      ]);

      // Create file object from a locally copied file.
      $uri = file_unmanaged_copy("https://steamcommunity-a.akamaihd.net/economy/image/" . $article->icon_url, 'public://inventory/' . $article->market_name . '.jpg', FILE_EXISTS_REPLACE);
      $file = File::Create([
        'uri' => $uri,
      ]);
      $file->save();

      // Attach file in node.
      $node_inventory->image_article->setValue([
        'target_id' => $file->id(),
      ]);

      $node_inventory->{'owner_article'}->setValue($user->id());
      $node_inventory->{'display'}->setValue(FALSE);

      $tags = $article->tags;

      foreach ($tags as $tag) {
        if ( $tag->category == "Exterior" or $tag->category == "Rarity" or $tag->category == "Quality" ) {
          $node_inventory->{strtolower($tag->category)}->setValue($tag->name);
        }
      }

      if ($node_inventory->{'exterior'}->value != null) {
        $node_inventory->save();
      }
    }
  }
}

/**
 * Implements hook_user_view().
 */
function threeecsgo_general_user_view($account, $view_mode, $langcode) {
  if ($account['#user']->getUsername() != "admin") {
    $username = $account['#user']->get('name')->value;

    $user = user_load_by_name($username);
  }

  if ($user != null) {
    $url_api_steam_1 = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=28ECE97465C977305C7D06CBBA0DE695&steamids=" . $user->get('steamid')->value;
    $content_url_1 = file_get_contents($url_api_steam_1);
    $json_steam_data = json_decode($content_url_1);

    if ($json_steam_data == null) {
      $url_api_steam_1 = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=6C8548C8E9A4AD096820E41BB1252B27&steamids=" . $user->get('steamid')->value;
      $content_url_1 = file_get_contents($url_api_steam_1);
      $json_steam_data = json_decode($content_url_1);
    }

    $personaname = $json_steam_data->response->players[0]->personaname;

    $username_drupal = strtolower(str_replace(' ', '', preg_replace('([^A-Za-z0-9])', '',$personaname)));

    $realname = $json_steam_data->response->players[0]->realname;
    $primaryclanid = $json_steam_data->response->players[0]->primaryclanid;
    $avatar = $json_steam_data->response->players[0]->avatarfull;
    $tmp = 'public://tmp/avatar.jpeg';
    file_put_contents($tmp, file_get_contents($avatar));

    $url_api_steam_2 = "http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/?appid=730&key=28ECE97465C977305C7D06CBBA0DE695&steamid=" . $user->get('steamid')->value;
    $content_url_2 = file_get_contents($url_api_steam_2);
    $json_steam_stats = json_decode($content_url_2);

    if ($json_steam_stats == null) {
      $url_api_steam_2 = "http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/?appid=730&key=6C8548C8E9A4AD096820E41BB1252B27&steamid=" . $user->get('steamid')->value;
      $content_url_2 = file_get_contents($url_api_steam_2);
      $json_steam_stats = json_decode($content_url_2);
    }

    $stats = $json_steam_stats->playerstats->stats;

    $user->{'personaname'}->setValue($personaname);
    $user->setUsername($username_drupal);

    $query = \Drupal::entityQuery('node')
      ->condition('type', 'team')
      ->condition('status', 1)
      ->condition('clanid', $primaryclanid);

    $team_id = $query->execute();

    foreach ( $team_id as $id ) {
      $team = Node::load($id);
    }

    $user->{'team'}->setValue($team->id());

    if ($realname != NULL) {
      $user->{'realname'}->setValue($realname);
    }
    else {
      $user->{'realname'}->setValue('No name');
    }

    // Create file object from a locally copied file.
    $uri = file_unmanaged_copy($avatar, 'public://avatars/' . $user->get('steamid')->value . '.jpg', FILE_EXISTS_REPLACE);
    $file = File::Create([
      'uri' => $uri,
    ]);
    $file->save();

    // Attach file in node.
    $user->avatarfull->setValue([
      'target_id' => $file->id(),
    ]);

    foreach ($stats as $stat) {
      if($stat->name == "total_deaths" or $stat->name == "total_kills" or $stat->name == "total_time_played"
        or $stat->name == "total_wins" or $stat->name == "total_kills_headshot" or $stat->name == "total_mvps"
        or $stat->name == "total_rounds_played" or $stat->name == "total_shots_fired" or $stat->name == "total_shots_hit") {
        if ($stat->name == "total_time_played") {
          $user->{$stat->name}->setValue(($stat->value / 60) / 60);
        }
        else {
          $user->{$stat->name}->setValue($stat->value);
        }
      }
      if ((strpos($stat->name, 'total_kills_') !== false or strpos($stat->name, 'total_hits_') !== false
          or strpos($stat->name, 'total_shots_') !== false) and !(strpos($stat->name, '_headshot') !== false
          or strpos($stat->name, '_enemy_weapon') !== false or strpos($stat->name, '_enemy_blinded') !== false
          or strpos($stat->name, '_against_zoomed_sniper') !== false or strpos($stat->name, 'total_shots_hit') !== false
          or strpos($stat->name, '_fired') !== false or strpos($stat->name, 'knife_fight') !== false)) {
            if (strpos($stat->name, 'total_kills_') !== false ) {
              $name_weapon = str_replace('total_kills_', '', $stat->name);
            } else {
              if (strpos($stat->name, 'total_hits_') !== false) {
                $name_weapon = str_replace('total_hits_', '', $stat->name);
              } else {
                $name_weapon = str_replace('total_shots_', '', $stat->name);
              }
            }

            $query_1 = \Drupal::entityQuery('node')
              ->condition('type', 'stats_weapon')
              ->condition('status', 1)
              ->condition('title', $user->getUsername() . " - " . $name_weapon);

            $node_id = $query_1->execute();

            if ( $node_id != null ) {
              foreach ( $node_id as $id ) {
                $node = Node::load($id);
              }
              $node->{str_replace('_' . $name_weapon, '', $stat->name)}->setValue($stat->value);

              $node->save();
            } else {
              $node = Node::create([
                'title' => $user->getUsername() . " - " . $name_weapon,
                'type' => 'stats_weapon',
                'status' => 1,
              ]);

              $query_3 = \Drupal::entityQuery('node')
                ->condition('type', 'weapon')
                ->condition('status', 1)
                ->condition('code_weapon', $name_weapon);

              $result = $query_3->execute();

              foreach ($result as $id) {
                $node_weapon = Node::load($id);
              }

              $node->{str_replace('_' . $name_weapon, '', $stat->name)}->setValue($stat->value);
              $node->{'weapon'}->setValue($node_weapon);
              $node->{'owner_stats_weapon'}->setValue($user->id());

              $node->save();
            }
          }
      }
      $user->save();
  }
}

/**
 * Implements hook_user_login().
 */
function threeecsgo_general_user_login($account) {
  // We want to redirect user on login.
  $response = new RedirectResponse('/player/' . $account->id());
  $response->send();

  return;
}
